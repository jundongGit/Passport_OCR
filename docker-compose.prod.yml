version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: passport-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=passport_ocr
      - MYSQL_USER=passport_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    networks:
      - passport-network
    command: --default-authentication-plugin=mysql_native_password

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: passport-backend
    restart: unless-stopped
    ports:
      - "3060:3060"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    environment:
      - NODE_ENV=production
      - PORT=3060
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=passport_ocr
      - DB_USER=passport_user
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - UPLOAD_DIR=uploads
      - FRONTEND_URL=https://passport.wanguo.co.nz
    depends_on:
      - mysql
    networks:
      - passport-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=https://passport.wanguo.co.nz/api
    container_name: passport-frontend
    restart: unless-stopped
    networks:
      - passport-network

  nginx:
    image: nginx:alpine
    container_name: passport-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot-data:/var/www/certbot
      - certbot-conf:/etc/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - passport-network

  certbot:
    image: certbot/certbot
    container_name: passport-certbot
    volumes:
      - certbot-data:/var/www/certbot
      - certbot-conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  mysql_data:
  certbot-data:
  certbot-conf:

networks:
  passport-network:
    driver: bridge
